(function (ctx) {
  'use strict';

  var
    M = {}, // define the module
    country,
    moduleName = 'vorwahlen', // the name of the module
    config = {
      "countryCode": "49"  // the default country code
    },
    data = {    // regular expressions to segment phone numbers
      "international": {
        "prefix": "(\\+|00)", // international prefix
        "cc": "(1242|1246|1264|1268|1284|1340|1345|1441|1473|1649|1664|1670|1671|1684|1721|1758|1767|1784|1787|1809|1829|1849|1868|1869|1876|1939|1|2(?:0|1[1-368]|2[0-9]|3[0-9]|4[0-9]|5[0-8]|6[0-9]|7|9[017-9])|3(?:0|1|2|3|4|5[0-9]|6|7[0-8]|8[0-25-79]|9)|4(?:0|1|2[013]|3|4|5|6|7|8|9)|5(?:0[0-9]|1|2|3|4|5|6|7|8|9[0-9])|6(?:0|1|2|3|4|5|6|7[02-9]|8[0-35-9]|9[012])|7|8(?:1|2|4|5[0235-6]|6|7(?:0|8(?:1[0]))|8(?:0|1[6-9]|2(?:1[36]|3[234])|3(?:5(?:1(?:0[0]|1[0]|3[0])))|6|8))|9(?:0|1|2|3|4|5|6[0-8]|7[1-7]|8|9[2-68]))"
      },
      "1": {
        "national": "", // national prefix
        "prefix": "(\\+1|(?:))",
        "special": "(4(?:5[6])|6(?:0[0])|7(?:0[0]|1[0])|8(?:0[0]|4[4]|5[5]|6[6]|7[7]|8[8])|9(?:0[0]))",
        "mobile": "(5(?:0[0]|3[3]|4[4]|6[6]|7[7]))",
        "fixed": "(2(?:0[1-9]|1[02-9]|2[4-68-9]|3[1469]|4[0268-9]|5[0-46]|6[0247-9]|7[026]|8[149])|3(?:0[1-9]|1[02-9]|2[0135]|3[014679]|4[035-7]|5[12]|6[014-5]|8[56])|4(?:0[1-9]|1[02-9]|2[345]|3[0-2457-8]|4[0-3]|5[08]|6[9]|7[0358-9]|8[04])|5(?:0[1-9]|1[02-9]|2[0]|3[0149]|4[01]|5[19]|6[1-37]|7[013-59]|8[015-7])|6(?:0[1-9]|1[02-9]|2[036]|3[0169]|4[1679]|5[017]|6[0-2479]|7[018]|8[124])|7(?:0[1-9]|1[2-9]|2[01457]|3[1247]|4[07]|5[478]|6[023579]|7[02-58-9]|8[014-7])|8(?:0[1-9]|1[02-9]|2[89]|3[012]|4[357-9]|5[06-9]|6[02-57-9]|7[02368])|9(?:0[1-9]|1[02-9]|2[058-9]|3[16-9]|4[0179]|5[1246]|7[0-38-9]|8[0459]))"
      },
      "33": { // french phone number ranges
        "national": "0", // national prefix
        "prefix": "(\\+33|0033|0)0?",
        "special": "(1(?:[578]$|1(?:[245]$|6\\d{3}$|8\\d{3}$|9$)|6\\d{2}$|9[16]$)|3\\d{4}$|8)",
        "mobile": "(6|7[5-9]|(?:97|98))",
        "fixed": "([12345])"
      },
      "49": { // german phone number ranges
        "national": "0", // national prefix
        "prefix": "(\\+49|0049|0)0?",
        "special": "(1(?:1(?:0|2|5|6[01])$|3[78]|8[0-9]|9(?:1|2|3|4|8(?:90|6|7|8|9)|9))|8(?:0[0])|9(?:0(?:09|0)))",
        "mobile": "(1(?:5(?:11|12|14|15|16|17|20|21|22|23|25|26|29|70|73|75|77|78|79|90|0(?:2[0]|5[0]|8[0])|1|2|3(?:1[0])|5|6(?:7[8])|7|8(?:8[8])|9)|6[023]|7[0-9]))",
        "fixed": "(2(?:0(?:1|2|3|4[135]|5[1-468]|6[456]|8|9)|1(?:29|0[234]|1|2|3[1-37]|4|5[0-46-9]|6[1-6]|7[13-5]|8[123]|9[1-35-6])|2(?:0[2-8]|1|2[2-8]|3[2-8]|4[1-8]|5[1-7]|6[1-9]|7[1-5]|8|9[1-7])|3(?:0[1-9]|1|2[3-57]|3[0-9]|4|5[1-57-9]|6[0-9]|7[1-57-9]|8[1-57-9]|9[1-5])|4(?:0[1-9]|1|2[1-9]|3[1-6]|4[013-9]|5[1-6]|6[1-5]|7[1-4]|8[24-6])|5(?:0[124-9]|1|2[0-9]|3[2-68]|4[1-35-8]|5[1-8]|6[1-8]|7[1-5]|8[1-8]|9[0-9])|6(?:0[1-8]|1|2[0-8]|3[0-9]|4[1-7]|5[1-7]|6[1-46-7]|7[1-8]|8[0-9]|9[1-7])|7(?:1|2[1-5]|3[2-9]|4[1-57]|5[0-58-9]|6[1-4]|7[0-9])|8(?:0[1-4]|1|2[1-8]|3[1-9]|4[1-5]|5[0-35-9]|6[1-7]|7[1-4])|9(?:0[2-5]|1|2[1-57-8]|3[1-57-8]|4[1-57-8]|5[1-57-8]|6[1-4]|7[1-57]|8[1-5]|9[1-4]))|3(?:0|2|3(?:0(?:1|2|3|4|5[1-6]|6|7|8[02-9]|9[34])|1|2(?:0[0-9]|1|2|3[0-57-9]|7|8|9)|3(?:1|2|3[1-8]|4|5|6[1-9]|7|8|9[3-8])|4(?:1|2|3[2-9]|4|5[1246-8]|6|7[02-9])|5|6(?:0[1-9]|1|2|3[1-8]|4|5[2-7]|6|7[1-9])|7(?:0[1-48]|1|2|3[1-4]|4[1-8]|5|6[02-9]|7|8|9)|8(?:1|2|3[0-9]|4[13-9]|5|6|7[02-8])|9(?:1|2[0-9]|3[123]|4|5|6[2-9]|7[0-9]|8[1-469]))|4(?:0|1|2(?:0[2-8]|1|2[1-4]|3|4[1-4]|5|6[123]|9[1-9])|3(?:1|2[12457-8]|3|4[1-8]|5|6[1-4]|7|8[1-6])|4(?:1|2[2-6]|3|4[13-6]|5|6[1-7]|7|8|9[1-8])|5|6(?:0[0-79]|1|2|3[235-9]|4|5[1-468-9]|6|7[123]|9[12])|7(?:1|2[12]|3|4[1-35-6]|5|6|7[1-69]|8[1-35])|9(?:0[13-79]|1|2[0-9]|3|4|5[3-6]|6|7[35-9]))|5(?:0(?:1|2[0-8]|3[23]|4|5[2-8])|1|2(?:0[0-9]|1|2|3|4[0-9]|5|6[3-8]|8|9)|3(?:1|2[2-79]|3|4[123]|5|6[1-5]|7|8[3-9])|4(?:1|2|3[3-69]|4|5[1-6]|6|7[1-8])|5|6(?:0[0-9]|1|2|3|4|9[1-8])|7(?:1|2[2-8]|3|4|5[1-6]|6|7[1-5]|8|9[235-7])|8(?:1|2[0235-9]|3|4[1-4]|5|6|7[2-7]|8|9[1-5])|9(?:1|2|3[0-9]|4|5[1-5]|6|7[13-5]))|6(?:0(?:1|2[0-9]|3|4[123]|5|6|7[124-7]|8[1-57])|1|2(?:0[0-9]|1|2|3|4|5[2-9]|8|9)|3(?:1|2|3[0-8]|4|5|6|7[0-9])|4(?:1|2[1-8]|3|4|5[0-48-9]|6[1-5]|7|8[1-4])|5|6(?:0[1-8]|1|2[1-68]|3|4[02-9]|5[123]|9[1-5])|7(?:0[1-5]|1|2|3[0-9]|4[1-4]|5|6[1246]|7|8[1-5]|9)|8(?:1|2|3|4[0-9]|5|6|7[013-58])|9(?:1|2[0-9]|3|4[013-9]|5|6[1-9]))|7(?:1|2(?:0[02-46-9]|1|2|3|4|5|6|7|9[1-8])|3(?:1|2[0-9]|3|4[1-46-9]|5|6[0-9]|7|8[1-4])|4(?:1|2[123]|3[0-9]|4|5|6[2-57-8])|5|6(?:0[0-9]|1|2|3|4|5)|7(?:1|2|3|4|5[24-7]))|8(?:1|2(?:0[1-9]|1|2[0-9]|3[1-4]|9[2-7])|3(?:0[0-9]|1|2[0-8]|3[1-4]|4|5[1-6]|6|7[0-9]|8|9[123])|4(?:1|2[2-9]|3|4|5[0-9]|6[1246]|7|8[1-68])|5|6[0135-9]|7(?:1|2[0-9]|3[1-35-8]|4|5[0-9]|6|7|8[0-57-9]|9[1-46-7])|8(?:1|2[1-8]|3|4[1-57-8]|5[0-68-9]|6|7[1-6]))|9(?:0(?:0[0-9]|1|2|3[0-9]|4|5[0-9]|6[12]|7|8[0-9]|9)|1|2(?:0[0-9]|1|2[1-6]|3|4[1-8]|5|6[2-8]|8|9[1-8])|3(?:1|2[0-57-9]|3|4[1-9]|5|6[1-6]|7|8[2-46-9]|9[0-9])|4(?:0[0-9]|1|2[1-8]|3|4|5[1-9]|6|7|8[1-57-9]|9)|5|6(?:0[0-8]|1|2|3|4|5|6|7|8|9)|7(?:1|2[1-46-8]|3|4[0-9]|5[1-4]|6|7[1-9])|8(?:1|2[0-9]|3[123]|4|5[1-9]|6[123]|7|8[1-9])|9(?:1|2[1-9]|3[1-4]|4|5[1-79]|6|7[1-35-8]|8|9[1-9])))|4(?:0|1(?:0[1-9]|2[0-9]|3[1-9]|4[0-468-9]|5[1-68-9]|6[1-9]|7[1-9]|8[0-9]|9[1-5])|2(?:0[2-9]|1|2[1-4]|3[0-9]|4[0-9]|5[1-8]|6[0-9]|7[1-7]|8[1-9]|9[2-8])|3(?:0[2357-8]|1|2[0-46-9]|3[0-9]|4[02-46-9]|5[1-8]|6[1-7]|7[12]|8[1-5]|9[234])|4(?:0[1-9]|1|2[1-35-6]|3[1-5]|4[1-7]|5[1-68]|6[1-9]|7[1-57-9]|8[0-9]|9[1-9])|5(?:0[1-68-9]|1|2[1-9]|3[1-79]|4[1-7]|5[0-9]|6[1-4])|6(?:0[2-9]|1|2[1-7]|3[0-9]|4[1-46]|5[1]|6[1-8]|7[1-4]|8[1-4])|7(?:0[2-8]|1|2[1-5]|3[1-7]|4[0-9]|5[1-8]|6[1-9]|7[0-9]|9[1-6])|8(?:0[2-6]|1|2[1-9]|3[02-9]|4[1-9]|5[1-9]|6[1-5]|7[1-7]|8[1-5]|9[23])|9(?:0[23]|1|2[0-9]|3[1-68-9]|4[1-8]|5[0-9]|6[1-8]|7[1-7]))|5(?:0(?:2[1-8]|3[1-7]|4[1-5]|5[1-6]|6[02-9]|7[1-4]|8[2-6])|1(?:0[1-358-9]|1|2[136-9]|3[0-25-9]|4[1-9]|5[1-9]|6[1-8]|7[1-7]|8[1-7]|9[0-9])|2(?:0[1-9]|1|2[1-68]|3[1-8]|4[124-8]|5[0-57-9]|6[1-6]|7[1-8]|8[1-6]|9[2-5])|3(?:0[0-9]|1|2[0-9]|3[1-79]|4[14-7]|5[1-8]|6[1-8]|7[1-9]|8[1-4])|4(?:0[1-79]|1|2[1-9]|3[1-9]|4[1-8]|5[1-9]|6[124-8]|7[1-6]|8[1-5]|9[1-5])|5(?:0[2-9]|1|2[0-57-9]|3[1-6]|4[1-6]|5[1-6]|6[1-5]|7[1-4]|8[2-6]|9[234])|6(?:0[1-9]|1|2[1-6]|3[1-6]|4[1-8]|5[0-9]|6[1-5]|7[1-7]|8[1-6]|9[1-6])|7(?:0[2-7]|1|2[1-6]|3[1-4]|4[1-6]|5[1-5]|6[13-9]|7[1-7])|8(?:0[2-8]|1|2[0-9]|3[1-9]|4[0-68-9]|5[0-57-9]|6[1-5]|7[2-5]|8[23])|9(?:0[1-9]|1|2[1-6]|3[1-79]|4[1-8]|5[1-7]|6[1-6]|7[135-8]))|6(?:0(?:0[2-47-8]|2[0-46-9]|3[1-69]|4[1-9]|5[0-9]|6[1-368]|7[1348]|8[1-7]|9[2-6])|1(?:0[1-9]|1|2[02-46-9]|3[0-68-9]|4[24-7]|5[0-2457-9]|6[1-7]|7[1-5]|8[1-8]|9[02568])|2(?:0[1-79]|1|2[0-46-9]|3[1-9]|4[1-79]|5[1-8]|6[1-9]|7[124-6]|8[1-7]|9[1-8])|3(?:0[1-8]|1|2[1-9]|3[1-9]|4[0-9]|5[1-35-9]|6[1-4]|7[1-5]|8[1-7]|9[1-8])|4(?:0[0-9]|1|2[0-9]|3[0-68-9]|4[0-79]|5[1-8]|6[124-8]|7[1-9]|8[2-6])|5(?:0[0-9]|1|2[2-7]|3[1-6]|4[1-5]|5[0-9]|6[1-9]|7[1-58]|8[0-9]|9[1-79])|6(?:1|2[0-9]|3[013-9]|4[1-8]|5[0-9]|6[013-9]|7[02-8]|8[1-4]|9[1-8])|7(?:0[1346-9]|1|2[1-8]|3[1-7]|4[1-7]|5[1-8]|6[1-6]|7[1-6]|8[1-9])|8(?:0[2-69]|1|2[14-7]|3[1-8]|4[1-48-9]|5[1-8]|6[14-9]|7[1-6]|8[178]|9[347-8])|9)|7(?:0(?:0|2[1-6]|3[1-4]|4[1-6]|5[1-6]|6[236]|7[123]|8[1-5])|1(?:1|2[1-9]|3[0-68-9]|4[1-8]|5[0-46-9]|6[1-6]|7[1-6]|8[1-4]|9[1-5])|2(?:0[234]|1|2[0-9]|3[1-7]|4[02-9]|5[0-9]|6[0-9]|7[1-7])|3(?:0[02-9]|1|2[1-9]|3[1-7]|4[03-8]|5[1-8]|6[1-7]|7[13-6]|8[1-9]|9[1-5])|4(?:0[234]|1|2[02-9]|3[1-6]|4[0-9]|5[1-9]|6[1-7]|7[1-8]|8[2-6])|5(?:0[2-6]|1|2[02457-9]|3[1-4]|4[1-6]|5[1-8]|6[1-9]|7[0-9]|8[1-7])|6(?:0[2]|1|2[0-9]|3[1-6]|4[1-6]|5[1-7]|6[0-9]|7[1-6]|8[1-5])|7(?:0[2-9]|1|2[0-9]|3[1-68-9]|4[1-8]|5[13-5]|6[1-5]|7[13-57])|8(?:0[2-8]|1|2[1-6]|3[1-9]|4[1-4]|5[1-4])|9(?:0[3-7]|1|3[0-9]|4[0-9]|5[0-57-9]|6[1-7]|7[1-7]))|8(?:0(?:2[0-9]|3[1-68-9]|4[1-35-6]|5[1-7]|6[1-7]|7[1-6]|8[1-6]|9[1-5])|1(?:0[24-6]|1|2[1-4]|3[13-9]|4[1-6]|5[1-37-8]|6[15-8]|7[016-9]|9[1-6])|2(?:0[2-8]|1|2[1-6]|3[0-46-9]|4[135-9]|5[0-47-9]|6[1-35-9]|7[1-46]|8[1-5]|9[1-6])|3(?:0[2-46]|1|2[0-8]|3[0-8]|4[0-9]|6[1-9]|7[02-9]|8[0-9]|9[2-5])|4(?:0[2-7]|1|2[1-46-7]|3[1-5]|4[1-6]|5[02-46-9]|6[0-9])|5(?:0[1-79]|1|3[1-8]|4[1-9]|5[0-8]|6[1-5]|7[1-4]|8[1-6]|9[123])|6(?:1|2[1-48-9]|3[013-9]|4[0-29]|5[0-246-7]|6[1-79]|7[017-9]|8[1-7])|7(?:0[2-9]|1|2[1-8]|3[1-5]|4[1-5]|5[1-46]|6[124-6]|7[1-4]|8[1-5])|8(?:0[1-35-9]|1|2[1-5]|4[15-7]|5[16-8]|6[0-27-9])|9)|9(?:0(?:6|7[0-8]|8[0-9]|9[0-479])|1(?:0[1-7]|1|2[0236-9]|3[1-5]|4[1-9]|5[1-8]|6[1-7]|7[0-9]|8[0-9]|9[0-9])|2(?:0[1-9]|1|2[0-357-9]|3[1-68]|4[1-6]|5[1-7]|6[0-9]|7[0-9]|8[0-9]|9[2-5])|3(?:0[235-7]|1|2[13-6]|3[1-9]|4[0-9]|5[0-9]|6[03-79]|7[1-8]|8[1-6]|9[1-8])|4(?:0[1-9]|1|2[0-46-9]|3[13-68-9]|4[1-8]|5[1-4]|6[1-9]|7[1-4]|8[0-24]|9[1-357-9])|5(?:0[2-5]|1|2[1-9]|3[1-6]|4[2-9]|5[1-6]|6[0-9]|7[1-6])|6(?:0[2-8]|1|2[124-8]|3[1-9]|4[1-8]|5[1-9]|6[1-6]|7[1-7]|8[123])|7(?:0[148]|1|2[0-9]|3[2-8]|4[124-9]|6[1-6]|7[1-9])|8(?:0[2-5]|1|2[02-9]|3[1-7]|4[1-8]|5[1-7]|6[157-9]|7[1-6])|9(?:0[13-8]|1|2[0-9]|3[1-35-8]|4[1-8]|5[1-6]|6[1-6]|7[1-8])))"
      }
    },
    regex = {   // building the regexes using `data`
      international: new RegExp('^' + data.international.prefix + data.international.cc + '(\\d*)$')
    };

  for (country in data) {
    if (/^\d+$/.test(country)) {
      ['special', 'mobile', 'fixed'].forEach(function(type){
        if (data[country] && data[country][type]) {
          if (!regex[country]) { regex[country] = {}; }
          if (!regex[country][type]) { regex[country][type] = {}; }
          regex[country][type] = new RegExp('^' + data[country].prefix + data[country][type] + '(\\d*)$');
        }
      }); // jshint ignore:line
    }
  }

  // format the result object `res` according to `options`
  function format(res, options) {
    var
      tmp,
      last,
      size = 4,
      seg = [];

    options.format = options.format || {};
    options.format.national = (options.format.national === undefined ? true : options.format.national);
    options.format.cc    = options.format.cc    || ' ';
    options.format.ndc   = options.format.ndc   || ' ';
    options.format.other = options.format.other || ' ';

    if (res.match) {
      last = res.match[res.match.length-1];
      while (last.length > 0) {
        if (last.length === 6 || last.length === 5) {
          size = 3;
        }
        tmp = last.substr(0, size);
        last = last.substr(size, last.length);
        if (tmp !== '') { seg.push(tmp); }
      }
      if (!!options.format.national && res.cc === options.countryCode) {
        tmp = data[res.cc].national + res.ndc;
      }
      else {
        tmp = '+' + res.cc + options.format.cc + (res.ndc || '');
      }
      tmp += (res.ndc ? options.format.ndc : '') + seg.join(options.format.other);
      res.formatted = tmp.trim();
    }
    return;
  }

  // sanitize the string `str` from annoying chars
  function sanitize(str) {
    return (str||'').replace(/[^\d\+]/g, '');
  }

  // match a given `number` using the regular expression `regex`
  function match(number, regex) {
    var res = number.match(regex);
    if (res) {
      res.shift();
      delete(res.index);
      delete(res.input);
    }
    return res;
  }

  /**
   * @param {String} number : phonenumber to parse
   * @param {Object} options :
   * ```
   *   { countryCode: '49', // {String} country code (cc) to select as home location
   *     format: {          // formating options
   *       national: false, // {Boolean} prefer international cc format over national, defaults to true
   *       cc: ' ',         // {String} country code separator, defaults to ' '
   *       ndc: ' ',        // {String} nat. dest. code separator, defaults to ' '
   *       other: ' ',      // {String} other number separator, defaults to ' '
   *     }
   *   }
   * ```
   * @return {Object}
   * ```
   *   { match: {Object} // match of number or `null`
   *     type: {String} `international|fixed|mobile` type of matched number
   *     formatted: {String} formatted number
   *     cc: {String} found country code
   *     ndc: {String} found national destination code
   *     nn: {String} found national number
   *   }
   * ```
   */
  M = function(number, options){
    var
      i,
      countryCode,
      res = {};

    options = options || {};
    options.countryCode = options.countryCode || config.countryCode;
    countryCode = options.countryCode;
      
    number = sanitize(number+'') || '';

    res.match = match(number, regex.international);

    if (res.match && res.match[1]) {
      res.type = 'international'; 
      countryCode = res.match[1];
      res.cc = countryCode;
    }
    if (regex[countryCode]) {
      for (i in regex[countryCode]) {
        res.match = match(number, regex[countryCode][i]);
        if (res.match) {
          res.type = i;
          res.cc = countryCode;
          res.ndc = res.match[1];
          res.nn = res.match[2];
          break;
        }
      }
    }
    format(res, options);

    return res;
  };

  // Node.js
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = M;
  }
  // AMD / RequireJS
  else if (typeof define !== 'undefined' && define.amd) {
    define([], function () {
      return M;
    });
  }
  // included in browser via <script> tag
  else if (typeof ctx.Window !== 'undefined' && !ctx[moduleName]) {
    ctx[moduleName] = M;
  }

}(this));
